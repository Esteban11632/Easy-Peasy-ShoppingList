@page "/shopping-list"
@using UserAuthentication
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Easy_Peasy_ShoppingList.Shared
@using Easy_Peasy_ShoppingList.Models
@using Easy_Peasy_ShoppingList.Services
@inject IShoppingListService ShoppingListService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILogin LoginService
@inject IFamily FamilyService

@if (isAuthenticated)
{
    @* <NavigationButtons /> <!-- Include Navigation Buttons Here --> *@

    <div class="shopping-list-container">
        <div class="header-container">
            <h3>Shopping List</h3>
            @* <button class="btn btn-danger" @onclick="HandleLogout">Logout</button> *@
        </div>

        <div class="user-info">
            <p>User: @currentUsername @(isAdmin ? "(Admin)" : "")</p>
            <p>Family Group: @familyGroup</p>
        </div>

        @if (isAdmin)
        {
            <div class="add-item-form">
                <input @bind="newItem.Name" placeholder="Item name" />
                <select @bind="newItem.Category">
                    <option value="">Select Category</option>
                    <option value="Groceries">Groceries</option>
                    <option value="Electronics">Electronics</option>
                    <option value="Clothing">Clothing</option>
                    <option value="Home">Home & Garden</option>
                    <option value="Other">Other</option>
                </select>
                <input @bind="newItem.Price" type="number" step="0.01" placeholder="Price" />
                <input @bind="newItem.Quantity" type="number" placeholder="Quantity" />
                <button @onclick="HandleAddItem" class="btn btn-primary">Add Item</button>
            </div>
        }

        <div class="filter-section">
            <select @bind="selectedCategory" class="category-filter">
                <option value="">All Categories</option>
                <option value="Groceries">Groceries</option>
                <option value="Electronics">Electronics</option>
                <option value="Clothing">Clothing</option>
                <option value="Home & Garden">Home & Garden</option>
                <option value="Other">Other</option>
            </select>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Item</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in FilteredItems)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Category</td>
                        <td>@item.Price.ToString("C")</td>
                        <td>@item.Quantity</td>
                        <td>@((item.Price * item.Quantity).ToString("C"))</td>
                        <td>
                            @if (isAdmin)
                            {
                                <button @onclick="() => RemoveItem(item)" class="btn btn-danger">Remove</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="total">
            <h4>Total: @(FilteredItems.Sum(i => i.Price * i.Quantity).ToString("C"))</h4>
        </div>
    </div>
}
else
{
    <p>Redirecting to login...</p>
}

@code {
    private List<ShoppingItem> shoppingItems = new();
    private ShoppingItem newItem = new();
    private string selectedCategory = "";
    private bool isAuthenticated;
    private bool isAdmin;
    private string currentUsername = string.Empty;
    private string familyGroup = string.Empty;

    private IEnumerable<ShoppingItem> FilteredItems =>
    string.IsNullOrEmpty(selectedCategory)
    ? shoppingItems
    : shoppingItems.Where(item => item.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        currentUsername = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username");
        isAuthenticated = !string.IsNullOrEmpty(currentUsername);

        if (isAuthenticated)
        {
            isAdmin = LoginService.IsAdmin(currentUsername);
            familyGroup = FamilyService.GetFamilyGroup(currentUsername);

            if (string.IsNullOrEmpty(familyGroup))
            {
                // Handle case where family group is not set
                await JSRuntime.InvokeVoidAsync("alert", "Family group is not set. Please contact your administrator.");
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Load shopping items from the database
            shoppingItems = await ShoppingListService.GetShoppingItemsAsync(familyGroup);
        }
        else
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
    }

    private async Task HandleAddItem(MouseEventArgs e)
    {
        try
        {
            string errorMessage = "";

            if (string.IsNullOrWhiteSpace(newItem.Name))
            {
                errorMessage += "Please enter an item name.\n";
            }
            if (string.IsNullOrWhiteSpace(newItem.Category))
            {
                errorMessage += "Please select a category.\n";
            }
            if (newItem.Price <= 0)
            {
                errorMessage += "Please enter a valid price.\n";
            }
            if (newItem.Quantity <= 0)
            {
                errorMessage += "Please enter a valid quantity.\n";
            }

            if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                return;
            }

            newItem.FamilyGroup = familyGroup;

            // Add the item to the database
            var addedItem = await ShoppingListService.AddShoppingItemAsync(newItem);
            shoppingItems.Add(addedItem);

            // Reset the form
            newItem = new ShoppingItem();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding item: {ex.Message}");
        }
    }

    private async Task RemoveItem(ShoppingItem item)
    {
        try
        {
            await ShoppingListService.DeleteShoppingItemAsync(item.Id);
            shoppingItems.Remove(item);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error removing item: {ex.Message}");
        }
    }

    /*
    private async Task HandleLogout()
    {
    try
    {
    Console.WriteLine("HandleLogout method invoked.");
    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");
    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isAuthenticated");
    NavigationManager.NavigateTo("/login", forceLoad: true); // Force Page Reload
    }
    catch (Exception ex)
    {
    Console.Error.WriteLine($"Logout failed: {ex.Message}");
    // Optionally, display an error message to the user
    }
        }
    */

}
