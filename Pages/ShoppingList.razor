@page "/shopping-list"
@using UserAuthentication;
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Easy_Peasy_ShoppingList.Shared
@using Easy_Peasy_ShoppingList.Models
@using Easy_Peasy_ShoppingList.Services
@inject IShoppingListService ShoppingListService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILogin LoginService
@inject IFamily FamilyService

@if (isAuthenticated)
{
    <NavigationButtons /> <!-- Include Navigation Buttons Here -->

    <div class="shopping-list-container">
        <div class="header-container">
            <h3>Shopping List</h3>
            <button class="btn btn-danger" @onclick="HandleLogout">Logout</button>
        </div>

        <div class="user-info">
            <p>User: @username @(isAdmin ? "(Admin)" : "")</p>
            <p>Family Group: @familyGroup</p>
        </div>

        @if (isAdmin)
        {
            <div class="add-item-form">
                <input @bind="newItem.Name" placeholder="Item name" />
                <select @bind="newItem.Category">
                    <option value="">Select Category</option>
                    <option value="Groceries">Groceries</option>
                    <option value="Electronics">Electronics</option>
                    <option value="Clothing">Clothing</option>
                    <option value="Home">Home & Garden</option>
                    <option value="Other">Other</option>
                </select>
                <input type="number" @bind="newItem.Price" placeholder="Price" min="0" step="0.01" />
                <input type="number" @bind="newItem.Quantity" placeholder="Quantity" min="1" />
                <button class="btn btn-primary" @onclick="AddItem">Add Item</button>
            </div>
        }

        <ul class="shopping-list">
            @foreach (var item in shoppingItems)
            {
                <li>
                    <span>@item.Name (@item.Category) - @item.Price.ToString("C") x @item.Quantity</span>
                    @if (isAdmin)
                    {
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">Remove</button>
                    }
                </li>
            }
        </ul>
    </div>
}
else
{
    <p>Redirecting to login...</p>
}

@code {
    private List<ShoppingItem> shoppingItems = new List<ShoppingItem>();
    private bool isAuthenticated;
    private bool isAdmin;
    private string? username;
    private string? familyGroup;
    private ShoppingItem newItem = new ShoppingItem();

    protected override async Task OnInitializedAsync()
    {
        username = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username");
        isAuthenticated = !string.IsNullOrEmpty(username);

        if (isAuthenticated)
        {
            isAdmin = LoginService.IsAdmin(username);
            familyGroup = FamilyService.GetFamilyGroup(username);

            if (string.IsNullOrEmpty(familyGroup))
            {
                // Handle case where family group is not set
                await JSRuntime.InvokeVoidAsync("alert", "Family group is not set. Please contact your administrator.");
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Load shopping items from the database
            shoppingItems = await ShoppingListService.GetShoppingItemsAsync(familyGroup);
        }
        else
        {
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
    }

    private async Task AddItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Item name is required.");
            return;
        }

        newItem.FamilyGroup = familyGroup ?? string.Empty;

        try
        {
            var addedItem = await ShoppingListService.AddShoppingItemAsync(newItem);
            shoppingItems.Add(addedItem);
            newItem = new ShoppingItem(); // Reset the form
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding item: {ex.Message}");
        }
    }

    private async Task RemoveItem(ShoppingItem item)
    {
        try
        {
            await ShoppingListService.DeleteShoppingItemAsync(item.Id);
            shoppingItems.Remove(item);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error removing item: {ex.Message}");
        }
    }

    private async Task HandleLogout()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "isAuthenticated");
            NavigationManager.NavigateTo("/login", forceLoad: true); // Force Page Reload
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Logout failed: {ex.Message}");
            // Optionally, display an error message to the user
        }
    }
}
