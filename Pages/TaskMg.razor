@page "/task-manager"
@using Microsoft.AspNetCore.Components.Authorization
@using TaskManager
@using UserAuthentication
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject ITaskStorage TaskStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject ILogin LoginService

<h3>Task Manager</h3>

@if (isAuthenticated)
{
    @if (isAdmin)
    {
        <h4>Create a New Task</h4>
        <EditForm Model="newTask" OnValidSubmit="HandleCreateTask">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="title">Title:</label>
                <InputText id="title" @bind-Value="newTask.Title" class="form-control" />
                <ValidationMessage For="@(() => newTask.Title)" />
            </div>

            <div class="form-group">
                <label for="description">Description:</label>
                <InputTextArea id="description" @bind-Value="newTask.Description" class="form-control" />
                <ValidationMessage For="@(() => newTask.Description)" />
            </div>

            <div class="form-group">
                <label for="assignedTo">Assign To:</label>
                <InputText id="assignedTo" @bind-Value="newTask.AssignedTo" class="form-control" />
                <ValidationMessage For="@(() => newTask.AssignedTo)" />
            </div>

            <div class="form-group">
                <label for="familyGroup">Family Group:</label>
                <InputText id="familyGroup" @bind-Value="newTask.FamilyGroup" class="form-control" />
                <ValidationMessage For="@(() => newTask.FamilyGroup)" />
            </div>

            <button type="submit" class="btn btn-primary">Create Task</button>
        </EditForm>
    }

    <h4>Your Tasks</h4>
    <ul>
        @if (userTasks.Any())
        {
            foreach (var task in userTasks)
            {
                <li>
                    <strong>@task.Title</strong>: @task.Description
                </li>
            }
        }
        else
        {
            <li>No tasks assigned to you.</li>
        }
    </ul>
}
else
{
    <p>You must be logged in to view this page.</p>
}

@code {
    private TodoTask newTask = new TodoTask("", "");
    private bool isAuthenticated;
    private bool isAdmin;
    private List<TodoTask> userTasks = new List<TodoTask>();

    protected override async Task OnInitializedAsync()
    {
        var username = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username");
        isAuthenticated = !string.IsNullOrEmpty(username);

        if (isAuthenticated)
        {
            isAdmin = LoginService.IsAdmin(username);
            LoadUserTasks(username);
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void LoadUserTasks(string username)
    {
        var familyGroup = "DefaultFamilyGroup"; // Replace with actual logic to get the user's family group
        userTasks = TaskStorage.GetTasksByFamilyGroup(familyGroup)
        .Where(task => task.AssignedTo == username)
        .ToList();
    }

    private void HandleCreateTask()
    {
        TaskStorage.SaveTasks(new Dictionary<string, TodoTask>
{
{ newTask.Title, newTask }
});
        newTask = new TodoTask("", ""); // Reset the form
    }
}
