@page "/login"

@using UserAuthentication;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject ILogin LoginService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="login-container">
    <h3>Login to Shopping List</h3>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
                    <div class="alert alert-danger">
                @errorMessage
                    </div>
        }

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>

    <div class="mt-3">
        <button type="button" class="btn btn-secondary" @onclick="NavigateToRegister">Register New Account</button>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        ((UserPassword)LoginService).OnAuthenticationMessage += HandleAuthMessage;
    }

    private void HandleAuthMessage(object? sender, string message)
    {
        errorMessage = message;
        StateHasChanged();
    }

    private async Task HandleLogin()
    {
        if (LoginService.Login(loginModel.Username, loginModel.Password))
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "username", loginModel.Username);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isAuthenticated", "true");
            NavigationManager.NavigateTo("/shopping-list");
        }
    }

    private Task NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register", true);
        return Task.CompletedTask;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}