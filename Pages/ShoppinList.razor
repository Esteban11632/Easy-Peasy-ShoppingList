@page "/"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime

<div class="shopping-list-container">
    <h3>Shopping List</h3>

    <div class="add-item-form">
        <input @bind="newItem.Name" placeholder="Item name" />
        <select @bind="newItem.Category">
            <option value="">Select Category</option>
            <option value="Groceries">Groceries</option>
            <option value="Electronics">Electronics</option>
            <option value="Clothing">Clothing</option>
            <option value="Home">Home & Garden</option>
            <option value="Other">Other</option>
        </select>
        <input @bind="newItem.Price" type="number" step="0.01" placeholder="Price" />
        <input @bind="newItem.Quantity" type="number" placeholder="Quantity" />
        <button @onclick="HandleAddItem" class="btn btn-primary">Add Item</button>
    </div>

    <div class="filter-section">
        <select @bind-value="selectedCategory" @bind-value:event="onchange" class="category-filter">
            <option value="">All Categories</option>
            <option value="Groceries">Groceries</option>
            <option value="Electronics">Electronics</option>
            <option value="Clothing">Clothing</option>
            <option value="Home">Home & Garden</option>
            <option value="Other">Other</option>
        </select>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Item</th>
                <th>Category</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in FilteredItems)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Category</td>
                    <td>@item.Price.ToString("C")</td>
                    <td>@item.Quantity</td>
                    <td>@((item.Price * item.Quantity).ToString("C"))</td>
                    <td>
                        <button @onclick="() => RemoveItem(item)" class="btn btn-danger">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="total">
        <h4>Total: @(FilteredItems.Sum(i => i.Price * i.Quantity).ToString("C"))</h4>
    </div>
</div>

@code {
    private List<ShoppingItem> shoppingItems = new();
    private ShoppingItem newItem = new();
    private string selectedCategory = "";

    private IEnumerable<ShoppingItem> FilteredItems =>
        string.IsNullOrEmpty(selectedCategory)
            ? shoppingItems
            : shoppingItems.Where(item => item.Category == selectedCategory);

    private void HandleAddItem(MouseEventArgs e)
    {
        try 
        {
            string errorMessage = "";
            
            if (string.IsNullOrWhiteSpace(newItem.Name))
            {
                errorMessage += "Please enter an item name.\n";
            }
            if (string.IsNullOrWhiteSpace(newItem.Category))
            {
                errorMessage += "Please select a category.\n";
            }
            if (newItem.Price <= 0)
            {
                errorMessage += "Please enter a valid price.\n";
            }
            if (newItem.Quantity <= 0)
            {
                errorMessage += "Please enter a valid quantity.\n";
            }

            if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                _ = JSRuntime.InvokeVoidAsync("alert", errorMessage);
                return;
            }

            var item = new ShoppingItem
            {
                Name = newItem.Name,
                Category = newItem.Category,
                Price = newItem.Price,
                Quantity = newItem.Quantity
            };

            shoppingItems.Add(item);
            newItem = new ShoppingItem();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void RemoveItem(ShoppingItem item)
    {
        shoppingItems.Remove(item);
        StateHasChanged();
    }

    public class ShoppingItem
    {
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public decimal Price { get; set; }
        public int Quantity { get; set; } = 1;
    }
}
