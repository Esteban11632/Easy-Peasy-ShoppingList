@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@implements IDisposable
@inject NavigationManager NavigationManager

<div class="page">
    @if (showNavigationButtons)
    {
        <NavigationButtons />
    }

    <button onclick="@(async () => await ToggleTheme())" class="theme-toggle">
        @(isDarkMode ? "‚òÄÔ∏è Light" : "üåô Dark")
    </button>

    <main>
        @Body
    </main>
</div>

@code {
    private bool isDarkMode;
    private bool showNavigationButtons = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isDarkMode = await JSRuntime.InvokeAsync<bool>("initializeTheme");
            UpdateNavigationButtonsVisibility(NavigationManager.Uri);
            NavigationManager.LocationChanged += OnLocationChanged;
            StateHasChanged();
        }
        catch
        {
            isDarkMode = false;
        }
    }

    private async Task ToggleTheme()
    {
        try
        {
            isDarkMode = !isDarkMode;
            var theme = isDarkMode ? "dark" : "light";
            await JSRuntime.InvokeVoidAsync("setTheme", theme);
        }
        catch
        {
            isDarkMode = !isDarkMode;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateNavigationButtonsVisibility(e.Location);
        InvokeAsync(StateHasChanged);
    }

    private void UpdateNavigationButtonsVisibility(string uri)
    {
        var path = new Uri(uri).AbsolutePath.ToLower();

        // Define routes where NavigationButtons should not be displayed
        var excludedRoutes = new List<string>
{
"/login",
"/register",
"/", // Assuming "/" redirects to "/login" via LoginRedirect.razor
};

        showNavigationButtons = !excludedRoutes.Contains(path);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
